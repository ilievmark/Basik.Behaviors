<?xml version="1.0" encoding="UTF-8"?>
<ContentPage
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:b="clr-namespace:Basil.Behaviors.Events;assembly=Basil.Behaviors"
    xmlns:h="clr-namespace:Basil.Behaviors.Events.Handlers;assembly=Basil.Behaviors"
    xmlns:p="clr-namespace:Basil.Behaviors.Events.Parameters;assembly=Basil.Behaviors"
    xmlns:c="clr-namespace:System.Windows.Input;assembly=netstandard"
    xmlns:t="clr-namespace:System.Threading.Tasks;assembly=netstandard"
    xmlns:a="clr-namespace:Basil.Behaviors.Events.HandlersAsync;assembly=Basil.Behaviors"
    x:Class="BehaviorsSample.Views.EventPage">
    <ContentPage.Content>

        <ScrollView>

            <StackLayout>

                <Button Text="Sample basic event to command behavior">
                    <Button.Behaviors>
                        <b:EventToCommandBehavior Command="{Binding Sample1Command}"
                                                  EventName="Clicked"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Event to method behavior demo">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="OnSample2Command"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Event to method with parameter behavior demo">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="JustAMethodNoMore">
                            <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Event to method behavior with param binding demo">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="JustAMethodTooButWithParameterBinding">
                            <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                            <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Event to method behavior with param binding demo">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="MethodWithNamedParam">
                            <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                            <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                            <p:NamedParameter x:TypeArguments="x:Int32" Name="defaultInt">606</p:NamedParameter>
                            <p:NamedParameter x:TypeArguments="x:String" Name="someParamName">Some special value</p:NamedParameter>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Event to method behavior with param binding sequence demo">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler MethodName="JustAMethodTooButWithParameterBinding">
                                <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                                <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                            </h:EventToMethodHandler>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                            </h:EventToMethodHandler>
                            <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                            <h:EventToMethodHandler MethodName="JustAMethodTooButWithParameterBinding">
                                <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                                <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Method handler with default parameter demo">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:DefaultParameter x:TypeArguments="x:String"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Sequence multiple execute command behavior">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                            <h:EventToCommandHandler Command="{Binding Sample2Command}"/>
                            <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                            <h:EventToCommandHandler Command="{Binding Sample2Command}"/>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Multiple handlers sequence execution demo">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <h:EventToMethodHandler MethodName="Method1"/>
                                <h:EventToMethodHandler MethodName="MethodAsync2"/>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Multiple handlers parallel execution demo">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:ParallelHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <h:EventToMethodHandler MethodName="Method1"/>
                                <h:EventToMethodHandler MethodName="MethodAsync2"/>
                            </h:ParallelHandlerExecutor>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Parallel within sequence demo">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <h:ParallelHandlerExecutor>
                                    <h:EventToMethodHandler MethodName="Method1"/>
                                    <h:EventToMethodHandler MethodName="MethodAsync2"/>
                                </h:ParallelHandlerExecutor>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Multiple handlers sequence with return parameter">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="ReturnStringMethod"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:ReturnParameter x:TypeArguments="x:String"/>
                                </h:EventToMethodHandler>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Multiple handlers with return parameter">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="ReturnStringMethod"/>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Async methods handlers with waiting">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler WaitResult="True" MethodName="RunResultActions">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:DefaultParameter x:TypeArguments="x:String"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Async methods with return handlers with waiting">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler WaitResult="True" MethodName="RunResultActionsAndReturn">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Async methods handlers without waiting">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler WaitResult="False" MethodName="RunResultActions">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <h:EventToMethodHandler MethodName="RunResultActionsWithPrevTask">
                                <p:ReturnParameter x:TypeArguments="t:Task"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Async methods with return handlers without waiting">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler x:TypeArguments="x:String" WaitResult="False" MethodName="RunResultActionsAndReturn">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <a:EventToAsyncMethodHandler x:TypeArguments="x:String" WaitResult="True" MethodName="RunResultActionsWithPrevTaskWithResult">
                                <p:GenericTaskReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Multiple handlers sequence execution with delay demo">
                    <Button.Behaviors>
                        <b:EventMultipleHandlerBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <a:DelayEventHandler DelayMilliseconds="4000" WaitResult="True"/>
                                <h:EventToMethodHandler MethodName="Method1"/>
                                <h:EventToMethodHandler MethodName="MethodAsync2"/>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlerBehavior>
                    </Button.Behaviors>
                </Button>

            </StackLayout>

        </ScrollView>

    </ContentPage.Content>
</ContentPage>
