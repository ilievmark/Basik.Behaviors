<?xml version="1.0" encoding="utf-8"?>

<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:b="clr-namespace:Basil.Behaviors.Events;assembly=Basil.Behaviors"
             xmlns:h="clr-namespace:Basil.Behaviors.Events.Handlers;assembly=Basil.Behaviors"
             xmlns:p="clr-namespace:Basil.Behaviors.Events.Parameters;assembly=Basil.Behaviors"
             xmlns:c="clr-namespace:System.Windows.Input;assembly=netstandard"
             xmlns:t="clr-namespace:System.Threading.Tasks;assembly=netstandard"
             xmlns:a="clr-namespace:Basil.Behaviors.Events.HandlersAsync;assembly=Basil.Behaviors"
             x:Class="BehaviorsSample.Pages.EventHandling.EventPage">
    
    <ContentPage.Content>
        <ScrollView>
            <StackLayout>

                <Button Text="Demo 1">
                    <Button.Behaviors>
                        <b:EventToCommandBehavior Command="{Binding Sample1Command}" EventName="Clicked"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 2">
                    <Button.Behaviors>
                        <b:EventToSetPropertyBehavior x:TypeArguments="x:Int32" EventName="Clicked" PropertyName="Int32Property" Value="5"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 3">
                    <Button.Behaviors>
                        <b:EventToSetFieldBehavior x:TypeArguments="x:Int32" EventName="Clicked" FieldName="_int32Field" Value="8"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 4">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="OnSample2Command"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 5">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="Model.m_model.Model.MethodToRize"/>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 6">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="JustAMethodNoMore">
                            <p:DefaultParameter x:TypeArguments="x:String"/>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 7">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="JustAMethodNoMore">
                            <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 8">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="JustAMethodTooButWithParameterBinding">
                            <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                            <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 9">
                    <Button.Behaviors>
                        <b:EventToMethodBehavior EventName="Clicked" MethodName="MethodWithNamedParam">
                            <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                            <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                            <p:NamedParameter x:TypeArguments="x:Int32" Name="defaultInt">606</p:NamedParameter>
                            <p:NamedParameter x:TypeArguments="x:String" Name="someParamName">Some special value</p:NamedParameter>
                        </b:EventToMethodBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 10">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="ReturnStringMethod"/>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 11">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="ReturnStringMethod"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:ReturnParameter x:TypeArguments="x:String"/>
                                </h:EventToMethodHandler>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 12">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler x:TypeArguments="x:String" WaitResult="False" MethodName="RunResultActionsAndReturn">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <a:EventToAsyncMethodHandler x:TypeArguments="x:String" WaitResult="True" MethodName="RunResultActionsWithPrevTaskWithResult">
                                <p:GenericTaskReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 13">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                            <h:EventToCommandHandler Command="{Binding Sample2Command}"/>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 14">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToSetPropertyHandler x:TypeArguments="x:Int32" PropertyName="Int32Property" Value="10"/>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 15">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToSetFieldHandler x:TypeArguments="x:Int32" FieldName="_int32Field" Value="33"/>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 16">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler MethodName="JustAMethodTooButWithParameterBinding">
                                <p:BindableParameter x:TypeArguments="c:ICommand" Value="{Binding Sample1Command}"/>
                                <p:GenericParameter x:TypeArguments="x:String">The best green in the world - Basil</p:GenericParameter>
                            </h:EventToMethodHandler>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 17">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 18">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:DefaultParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler WaitResult="True" MethodName="RunResultActions">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 19">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:DefaultParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler WaitResult="False" MethodName="RunResultActions">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <h:EventToMethodHandler MethodName="RunResultActionsWithPrevTask">
                                <p:ReturnParameter x:TypeArguments="t:Task"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 20">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler WaitResult="True" MethodName="RunResultActionsAndReturn">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </h:EventToMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 21">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                            <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                <p:ReturnParameter x:TypeArguments="x:Int32"/>
                            </h:EventToMethodHandler>
                            <a:EventToAsyncMethodHandler x:TypeArguments="x:String" WaitResult="False" MethodName="RunResultActionsAndReturn">
                                <p:ReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                            <a:EventToAsyncMethodHandler x:TypeArguments="x:String" WaitResult="True" MethodName="RunResultActionsWithPrevTaskWithResult">
                                <p:GenericTaskReturnParameter x:TypeArguments="x:String"/>
                            </a:EventToAsyncMethodHandler>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 22">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <a:DelayEventHandler DelayMilliseconds="4000" WaitResult="True"/>
                                <h:EventToMethodHandler MethodName="Method1"/>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 23">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <a:DelayEventHandler DelayMilliseconds="4000" WaitResult="True"/>
                                <h:EventToMethodHandler MethodName="Method1"/>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 23">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                                <a:DelayEventHandler DelayMilliseconds="4000" WaitResult="True"/>
                                <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                    <p:ReturnParameter x:TypeArguments="x:Int32"/>
                                </h:EventToMethodHandler>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 24">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToMethodHandler x:TypeArguments="x:Int32" MethodName="GetInt"/>
                                <a:DelayedCompositEventHandler DelayMilliseconds="4000" WaitResult="True">
                                    <h:EventToMethodHandler x:TypeArguments="x:String" MethodName="GetString">
                                        <p:ReturnParameter x:TypeArguments="x:Int32"/>
                                    </h:EventToMethodHandler>
                                </a:DelayedCompositEventHandler>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 25">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:ParallelHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <h:EventToMethodHandler MethodName="Method1"/>
                                <h:EventToMethodHandler MethodName="MethodAsync2"/>
                            </h:ParallelHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 26">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <h:ParallelHandlerExecutor>
                                    <h:EventToMethodHandler MethodName="Method1"/>
                                    <h:EventToMethodHandler MethodName="MethodAsync2"/>
                                </h:ParallelHandlerExecutor>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
                <Button Text="Demo 27">
                    <Button.Behaviors>
                        <b:EventMultipleHandlersBehavior EventName="Clicked">
                            <h:SequenceHandlerExecutor>
                                <h:EventToCommandHandler Command="{Binding Sample1Command}"/>
                                <h:EventToMethodHandler MethodName="JustAMethodNoMore">
                                    <p:GenericParameter x:TypeArguments="x:String">Some value passed as param</p:GenericParameter>
                                </h:EventToMethodHandler>
                                <a:DelayedCompositEventHandler>
                                    <h:ParallelHandlerExecutor>
                                        <h:EventToMethodHandler MethodName="Method1"/>
                                        <h:EventToMethodHandler MethodName="MethodAsync2"/>
                                    </h:ParallelHandlerExecutor>
                                </a:DelayedCompositEventHandler>
                            </h:SequenceHandlerExecutor>
                        </b:EventMultipleHandlersBehavior>
                    </Button.Behaviors>
                </Button>
                
            </StackLayout>
        </ScrollView>
    </ContentPage.Content>
    
</ContentPage>